#!/usr/bin/env python3

import click
from elasticsearch import Elasticsearch
from json import loads
import os
from dotenv import load_dotenv
from logger import logger
from click import Context

load_dotenv()

ES_CLOUD_ID = os.environ['ES_CLOUD_ID']
ES_KEY_ID = os.environ['ES_KEY_ID']
ES_API_KEY = os.environ['ES_API_KEY']

es_client = Elasticsearch(cloud_id=ES_CLOUD_ID, api_key=(ES_KEY_ID, ES_API_KEY))


@click.command(
    context_settings={"ignore_unknown_options": True, "allow_extra_args": True}
)
@click.option(
    "--index",
    type=click.Choice(["content", "taxonomy"], case_sensitive=True),
    required=True,
)
@click.option(
    "--action",
    type=click.Choice(["index", "create", "delete", "delete-data"], case_sensitive=True),
    required=True,
)
@click.pass_context
def run(ctx: Context, index: str, action: str):
    if action == "index":
        print('TODO: Action is index')
    elif action == "create":
        create_index(index)
    elif action == "delete":
        delete_index(index)
    elif action == "delete-data":
        delete_data(index)


def create_index(index_name: str):
    settings = get_file_content(os.path.abspath(os.curdir) + '/models/' + index_name + '/settings.json')
    mappings = get_file_content(os.path.abspath(os.curdir) + '/models/' + index_name + '/mappings.json')
    try:
        res = es_client.indices.create(
            index=index_name,
            settings=settings,
            mappings=mappings
        )
    except Exception as e:
        logger.exception(str(e))


def delete_index(index_name: str):
    try:
        es_client.indices.delete(
            index=[index_name]
        )
    except Exception as e:
        logger.exception(e)


def delete_data(index_name: str):
    try:
        es_client.delete_by_query(
            index=[index_name],
            body={
                "query": {
                    "match_all": {}
                }
            }
        )
    except Exception as e:
        logger.exception(e)


def get_file_content(path):
    with open(path, 'r') as file:
        content = loads(file.read())
    return content


if __name__ == "__main__":
    run()
