service: user-profile

configValidationMode: warn

frameworkVersion: ^2.57.0

variablesResolutionMode: 20210326

projectDir: ../

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: pip-${self:provider.stage}-services-lambdas

  lambdaHashingVersion: 20201221
  vpc:
    securityGroupIds: ${file(../vpc.${self:provider.stage}.js):securityGroupIds}
    subnetIds: ${file(../vpc.${self:provider.stage}.js):subnetIds}
  stackTags:
    service: ${self:service}
    env: ${self:provider.stage}
    version: 1
    teamsEmail: kenan.hancer@somoglobal.com
    team: dods
  tags:
    myTag1: myTag1
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        -  'rds:*'
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
        - '*'
    # This section ties the functions to a particular API Gateway instead of creating a new one
    #Â for the time being, we have hardcoded values for API Gateway initally created  with dods-iam.
    # We will move to dynamic Gateway selection based on sls stage.
  apiGateway:
    restApiId: ${file(../apig.${self:provider.stage}.yml):apiGatewayId, ""} 
    restApiRootResourceId: ${file(../apig.${self:provider.stage}.yml):apiRootResourceId, ""} 
    description: Default Gateway for ${self:provider.stage} deployed with dods-iam  

  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_PORT: ${self:custom.serverless-offline.httpPort}
    MARIADB_CONNECTION_LIMIT: 5
    DB_DRIVER: mariadb
    MARIA_DB_DATABASE: 'dods'
    MARIA_DB_HOST: ${ssm:/infra/${self:provider.stage}/rds/endpoint, 'localhost'}
    MARIA_DB_USERNAME: ${ssm:/infra/${self:provider.stage}/rds/username, 'root' }
    MARIA_DB_PASSWORD: ${ssm:/infra/${self:provider.stage}/rds/password, 'rootPass'}
    MARIADB_CONNECTION_STRING: 'mariadb://${self:provider.environment.MARIA_DB_USERNAME}:${self:provider.environment.MARIA_DB_PASSWORD}@${self:provider.environment.MARIA_DB_HOST}:3306/dods?allowPublicKeyRetrieval=true&useSSL=false'
    GET_USER_ENDPOINT: ${self:custom.envs.${self:provider.stage}.getUserEndpoint, "http://localhost:1081/user"}
    GET_USERBYNAME_ENDPOINT: ${self:custom.envs.${self:provider.stage}.getUserByNameEndpoint, "http://localhost:1081/userByName"}
    GET_ROLE_ENDPOINT: ${self:custom.envs.${self:provider.stage}.getRoleEndpoint, "http://localhost:1081/role"}

custom:
  envs:
    dev:
      getUserEndpoint: https://emhumq7ktf.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/user
      getUserByNameEndpoint: https://emhumq7ktf.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/userByName
      getRoleEndpoint: https://emhumq7ktf.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/role

    qa:
      getUserEndpoint: https://e5txxyf6ik.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/user
      getUserByNameEndpoint: https://e5txxyf6ik.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/userByName
      getRoleEndpoint: https://e5txxyf6ik.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/role

    local:
      getUserEndpoint: http://localhost:1081/user
      getUserByNameEndpoint: http://localhost:1081/userByName
      getRoleEndpoint: http://localhost:1081/role
      MARIA_DB_HOST: 'localhost'
      MARIA_DB_USERNAME: 'root'
      MARIA_DB_PASSWORD: 'rootPass'
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    keepOutputDirectory: false
  serverless-offline:
    httpPort: 3000
  prune:
    automatic: true
    number: 1
  dependsOn:
    enabled: true
    chains: 8
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - passive
    host: http://localhost # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: false # optional - Start LocalStack in Docker on Serverless deploy
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-localstack
  - serverless-dependson-plugin
  - serverless-offline

functions:
  createUserProfile:
    handler: src/handlers/createUserProfile/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: post
          path: user

