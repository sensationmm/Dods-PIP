service: user-profile
configValidationMode: warn
frameworkVersion: ^2.64.0
variablesResolutionMode: 20210326
projectDir: ../

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: pip-${self:provider.stage}-services-lambdas

  lambdaHashingVersion: 20201221
  vpc:
    securityGroupIds: ${file(../env-config.${self:provider.stage}.js):securityGroupIds, file(../env-config.dev.js):securityGroupIds}
    subnetIds: ${file(../env-config.${self:provider.stage}.js):subnetIds, file(../env-config.dev.js):subnetIds}
  stackTags:
    service: ${self:service}
    env: ${self:provider.stage}
    version: 1
    teamsEmail: kenan.hancer@somoglobal.com
    team: dods
  tags:
    myTag1: myTag1
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "rds:*"
      Resource:
        - "*"
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    # This section ties the functions to a particular API Gateway instead of creating a new one
    #Â for the time being, we have hardcoded values for API Gateway initally created  with dods-iam.
    # We will move to dynamic Gateway selection based on sls stage.
  apiGateway:
    restApiId: ${file(../env-config.${self:provider.stage}.js):apiGatewayId, file(../env-config.dev.js):apiGatewayId}
    restApiRootResourceId: ${file(../env-config.${self:provider.stage}.js):apiRootResourceId, file(../env-config.dev.js):apiRootResourceId}
    description: Default Gateway for ${self:provider.stage} deployed with Terraform

  environment:
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_PORT: ${self:custom.serverless-offline.httpPort}
    API_GATEWAY_BASE_URL: https://${self:provider.apiGateway.restApiId}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    DB_CONNECTION_LIMIT: 5
    DB_DRIVER: mariadb
    DB_NAME: dods
    DB_HOST: ${ssm:/infra/${self:provider.stage}/rds/endpoint, 'localhost'}
    DB_USER: ${ssm:/infra/${self:provider.stage}/rds/username, 'dods' }
    DB_PASSWORD: ${ssm:/infra/${self:provider.stage}/rds/password, 'dods'}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules:
      forceInclude:
        - mariadb
    keepOutputDirectory: false
  serverless-offline:
    httpPort: 3000
  prune:
    automatic: true
    number: 1
  dependsOn:
    enabled: true
    chains: 8
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - passive
    host: http://localhost # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: false # optional - Start LocalStack in Docker on Serverless deploy
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
  apiGatewayCaching:
    enabled: true

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-localstack
  - serverless-dependson-plugin
  - serverless-offline
  - serverless-api-gateway-caching

functions:
  createUserProfile:
    handler: src/handlers/createUserProfile/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: post
          path: user
          caching:
            enabled: false
  searchUsers:
    handler: src/handlers/searchUsers/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: get
          path: users
          caching:
            enabled: false
  getUser:
    handler: src/handlers/getUser/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: get
          path: user/{userId}
          caching:
            enabled: false
  createUser:
    handler: src/handlers/createUser/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: post
          path: users
          caching:
            enabled: false
  getClientAccountsByUser:
    handler: src/handlers/getClientAccountsByUser/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: get
          path: users/{userId}/client-accounts
          caching:
            enabled: false