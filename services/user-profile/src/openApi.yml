openapi: 3.0.0
info:
  description: Dods User Profile API
  version: "1.0.0"
  title: User Profile API
servers:
  - url: /api

paths:
  /user:
    get:
      summary: List all User Profiles
      parameters:
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/with_roles"
      responses:
        "200":
          description: List of User Profiles in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/UserProfile"
                    - $ref: "#/components/schemas/UserProfileWithRole"
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
    post:
      operationId: createUserProfile
      summary: Add new User Profile
      requestBody:
        description: User Profile to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileCreate"
      responses:
        "200":
          description: Succesfully created User Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid User Profile supplied
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
        "409":
          description: an existing item already exists
  /user/{userId}:
    parameters:
      - in: path
        name: userId
        schema:
          type: string
          format: uuid
        required: true
        description: UUID of the User to get
    get:
      summary: Get an User by UUID
      operationId: getUser
      parameters:
        - in: path
          name: userId
          description: User Profile UUID
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Specified client account
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/UserProfile"
                  - $ref: "#/components/schemas/UserProfileWithRole"
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
        "404":
          description: Client Account not found
    put:
      summary: Update User Profile
      requestBody:
        description: User Profile update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        "200":
          description: Succesfully updated User Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid User Profile supplied
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
        "409":
          description: an existing item already exists
  /user-by-name/{nameOrPartial}:
    parameters:
      - in: path
        name: nameOrPartial
        schema:
          type: string
        required: true
        description: Name or partial name to search by
    get:
      summary: Get a User by name
      operationId: getUserByName
      responses:
        "200":
          description: Found Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserProfile"
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
        "404":
          description: No Users found
  /users:
    get:
      summary: Returns a list of users for a given first name and last name
      operationId: searchUsers
      parameters:
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/startsWith"
        - $ref: "#/components/parameters/role"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/sortBy"
        - $ref: "#/components/parameters/sortDirection"
      responses:
        "200":
          description: List of User Profiles in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/UserProfile"
                    - $ref: "#/components/schemas/UserProfileWithRole"
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
    post:
      operationId: createUser
      summary: Add new User
      requestBody:
        description: Add new User
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        "200":
          description: Succesfully created User Profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        "400":
          description: Invalid User Profile supplied
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions
        "409":
          description: an existing item already exists
  /role:
    get:
      summary: List all Roles
      operationId: getRole
      parameters:
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: List of User Profiles in the system
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "401":
          description: Not authenticated
        "403":
          description: Does not have correct permissions

components:
  schemas:
    UserProfileBase:
      type: object
      properties:
        title:
          type: string
          example: Dr
        first_name:
          type: string
          example: Jane
        last_name:
          type: string
          example: Blogs
        primary_email_address:
          type: string
          example: Jane.Blogs@email.com
        secondary_email_address:
          type: string
          example: Jane.Blogs@email.com
        telephone_number_1:
          type: string
          example: "+442071838750"
        telephone_number_2:
          type: string
          example: "+442071838750"
      required:
        - title
        - first_name
        - last_name
        - primary_email_address
        - telephone_number_1
    UserProfile:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/UserProfileBase"
        - type: object
          properties:
            id:
              type: string
              format: uuid
              example: d290f1ss-6c54-4b01-98e6-d701748f7151
          required:
            - id
    Role:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ss-6c54-4b01-98e6-d701748f7151
        title:
          type: string
          example: Dods Contractor
        dods_role:
          description: Indicates if role is dods internal role
          type: boolean
      required:
        - id
        - title
        - dods_role

    UserProfileWithRole:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/UserProfile"
        - type: object
          required:
            - role
          properties:
            role:
              $ref: "#/components/schemas/Role"
    UserProfileCreate:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/UserProfileBase"
        - type: object
          properties:
            role_id:
              type: string
              format: uuid
              example: d290f1ss-6c54-4b01-98e6-d701748f7151
          required:
            - role_id
    UserCreate:
      type: object
      properties:
        title:
          type: string
          example: Mr
        firstName:
          type: string
          example: Jane
        lastName:
          type: string
          example: Blogs
        primaryEmail:
          type: string
          example: Jane.Blogs@email.com
        secondaryEmail:
          type: string
          example: Jane.Blogs@email.com
        telephoneNumber:
          type: string
          example: "+442071838750"
        roleName:
          type: string
        clientAccountId:
          type: string
        clientAccountName:
          type: string
      required:
        - title
        - firstName
        - lastName
        - primaryEmail
        - roleName

  parameters:
    name:
      in: query
      name: name
      schema:
        type: string
      required: false
      description: User Profile's FirstName or LastName
    startsWith:
      in: query
      name: startsWith
      schema:
        type: string
      required: false
      description: User Profile's lastName starts with letter
    role:
      in: query
      name: role
      schema:
        type: string
        format: uuid
      required: false
      example: d290f1ss-6c54-4b01-98e6-d701748f7151
    limit:
      in: query
      name: limit
      schema:
        type: integer
        format: int32
        default: 30
        minimum: 0
        maximum: 100
      required: false
      allowEmptyValue: true
    offset:
      in: query
      name: offset
      schema:
        type: integer
        default: 0
        minimum: 0
      required: false
      description: Offset value for pagination
    sortBy:
      in: query
      name: sortBy
      schema:
        type: string
        default: lastName
        enum:
          - lastName
          - account
          - primaryEmail
          - role
      required: false
      description: sort User Profile by name or subscription
    sortDirection:
      in: query
      name: sortDirection
      schema:
        type: string
        default: ASC
        enum:
          - ASC
          - DESC
      required: false
      description: direction ASC or DESC

    with_roles:
      in: query
      name: with_roles
      schema:
        type: boolean
      allowEmptyValue: true
      description: Return User Profiles with role data
