service: editorial-workflow
configValidationMode: warn
frameworkVersion: ^2.57.0
variablesResolutionMode: 20210326
projectDir: ../

provider:
    name: aws
    region: eu-west-1
    runtime: nodejs14.x
    timeout: 10
    stage: ${opt:stage, 'dev'}
    deploymentBucket:
        name: pip-${self:provider.stage}-services-lambdas

    lambdaHashingVersion: 20201221
    vpc:
        securityGroupIds: ${file(../env-config.${self:provider.stage}.js):securityGroupIds, file(../vpc.local.js):securityGroupIds}
        subnetIds: ${file(../env-config.${self:provider.stage}.js):subnetIds, file(../vpc.local.js):subnetIds}
    stackTags:
        service: ${self:service}
        env: ${self:provider.stage}
        version: 1
        teamsEmail: dods.project@somoglobal.com
        team: dods
    tracing:
        lambda: true
    iamRoleStatements:
        - Effect: 'Allow'
          Action:
            -  'rds:*'
          Resource:
            - '*'
        - Effect: Allow
          Action:
              - s3:*
          Resource: 'arn:aws:s3:::*'
        - Effect: 'Allow'
          Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
          Resource:
              - '*'
        # This section ties the functions to a particular API Gateway instead of creating a new one
        #Â for the time being, we have hardcoded values for API Gateway initally created  with dods-iam.
        # We will move to dynamic Gateway selection based on sls stage.
    apiGateway:
        restApiId: ${file(../env-config.${self:provider.stage}.js):apiGatewayId, ""}
        restApiRootResourceId: ${file(../env-config.${self:provider.stage}.js):apiRootResourceId, ""}
        description: Default Gateway for ${self:provider.stage} deployed by Terraform

    environment:
        SERVERLESS_STAGE: ${self:provider.stage}
        SERVERLESS_PORT: ${self:custom.serverless-offline.httpPort}
        DB_CONNECTION_LIMIT: 5
        DB_DRIVER: mariadb
        DB_NAME: dods
        DB_HOST: ${ssm:/infra/${self:provider.stage}/rds/endpoint, 'localhost'}
        DB_USER: ${ssm:/infra/${self:provider.stage}/rds/username, 'root' }
        DB_PASSWORD: ${ssm:/infra/${self:provider.stage}/rds/password, 'rootPass'}
        BASE_URL: https://${self:provider.apiGateway.restApiId}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}/
        BUCKET_EDITORIAL: dods-dev-editorial-record-documents

custom:
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true # Node modules configuration for packaging
        packager: 'npm' # Packager that will be used to package your external modules
        keepOutputDirectory: false
    serverless-offline:
        httpPort: 3000
    prune:
        automatic: true
        number: 1
    dependsOn:
        enabled: true
        chains: 8
    localstack:
        stages:
            # list of stages for which the plugin should be enabled
            - passive
        host: http://localhost # optional - LocalStack host to connect to
        edgePort: 4566 # optional - LocalStack edge port to connect to
        autostart: false # optional - Start LocalStack in Docker on Serverless deploy
        # lambda:
        #   # Enable this flag to improve performance
        #   mountCode: True
        docker:
            # Enable this flag to run "docker ..." commands as sudo
            sudo: False
    # apiGatewayCaching:
        # enabled: true

plugins:
    - serverless-webpack
    - serverless-prune-plugin
    - serverless-localstack
    - serverless-dependson-plugin
    - serverless-offline
    # - serverless-api-gateway-caching

functions:
    createEditorialRecord:
        handler: src/handlers/createEditorialRecord/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: post
                  path: editorial-record
                #   caching:
                    #   enabled: false
    
    updateEditorialRecord:
        handler: src/handlers/updateEditorialRecord/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: put
                  path: editorial-record/{recordId}
                #   caching:
                    #   enabled: false
    
    getEditorialRecord:
        handler: src/handlers/getEditorialRecord/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: get
                  path: editorial-record/{recordId}
                #   caching:
                    #   enabled: false
    
    lockEditorialRecord:
        handler: src/handlers/lockEditorialRecord/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: put
                  path: editorial-record/{recordId}/lock
                #   caching:
                    #   enabled: false
    
    getContentSourcesList:
        handler: src/handlers/getContentSourcesList/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: get
                  path: content-sources
                #   caching:
                    #   enabled: false

    getInformationTypesList:
        handler: src/handlers/getInformationTypesList/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: get
                  path: information-types
                #   caching:
                    #   enabled: false

    getEditorialRecordStatusList:
        handler: src/handlers/getEditorialRecordStatusList/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: get
                  path: editorial-record-status
                #   caching:
                    #   enabled: false

    searchEditorialRecords:
        handler: src/handlers/searchEditorialRecords/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: get        
                  path: editorial-record
                #   caching:
                    #   enabled: false

    publishEditorialRecord:
        handler: src/handlers/publishEditorialRecord/index.handle
        description: Triggered on HTTP request
        events:
            - http:
                  method: post        
                  path: /editorial-record/{recordId}/publish
                #   caching:
                    #   enabled: false
