service: editorial-workflow
configValidationMode: warn
frameworkVersion: ^2.57.0
variablesResolutionMode: 20210326
projectDir: ../

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}

  lambdaHashingVersion: 20201221
  stackTags:
    service: ${self:service}
    env: ${self:provider.stage}
    version: 1
    teamsEmail: dods.project@somoglobal.com
    team: dods
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:*        
      Resource: "arn:aws:s3:::*"

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      Resource: ${self:custom.envs.${self:provider.stage}.editorialDynamoARN}

    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
    # This section ties the functions to a particular API Gateway instead of creating a new one
    #Â for the time being, we have hardcoded values for API Gateway initally created  with dods-iam.
    # We will move to dynamic Gateway selection based on sls stage.
  apiGateway:
      restApiId: ${file(../apig.${self:provider.stage}.yml):apiGatewayId, ""} 
      restApiRootResourceId: ${file(../apig.${self:provider.stage}.yml):apiRootResourceId, ""} 
      description: Default Gateway for ${self:provider.stage} deployed with dods-ia

  environment:
    NODE_ENV: ${opt:NODE_ENV, 'test'}
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_PORT: ${self:custom.serverless-offline.httpPort}
    DYNAMO_TABLE: editorial-records-${self:provider.stage}-table

custom:
  envs:
    dev:
      editorialDynamoARN: "arn:aws:dynamodb:eu-west-1:390773179818:table/editorial-records-dev-table"
    qa:
      editorialDynamoARN: "arn:aws:dynamodb:eu-west-1:817206606893:table/editorial-records-qa-table"

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    keepOutputDirectory: false
  serverless-offline:
    httpPort: 3000
  prune:
    automatic: true
    number: 1
  dependsOn:
    enabled: true
    chains: 8
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - passive
    host: http://localhost # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: false # optional - Start LocalStack in Docker on Serverless deploy
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-localstack
  - serverless-dependson-plugin
  - serverless-offline

functions:
  create-editorial-record:
    handler: src/handlers/createEditorialRecord/index.handle
    description: Triggered on HTTP request
    events:
      - http:
          method: post
          path: editorial-record