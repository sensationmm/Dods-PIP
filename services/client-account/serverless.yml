service: client-account
configValidationMode: warn
frameworkVersion: ^2.64.0
variablesResolutionMode: 20210326
projectDir: ../

provider:
    name: aws
    region: eu-west-1
    runtime: nodejs14.x
    stage: ${opt:stage, 'dev'}
    deploymentBucket:
        name: pip-${self:provider.stage}-services-lambdas

    lambdaHashingVersion: 20201221
    vpc:
        securityGroupIds: ${file(../env-config.${self:provider.stage}.js):securityGroupIds, file(../vpc.local.js):securityGroupIds}
        subnetIds: ${file(../env-config.${self:provider.stage}.js):subnetIds, file(../vpc.local.js):subnetIds}
    stackTags:
        service: ${self:service}
        env: ${self:provider.stage}
        version: 1
        teamsEmail: kenan.hancer@somoglobal.com
        team: dods
    tags:
        myTag1: myTag1
    tracing:
        apiGateway: true
        lambda: true
    iamRoleStatements:
        - Effect: "Allow"
          Action:
              - "rds:*"
          Resource:
              - "*"
        - Effect: "Allow"
          Action:
              - "xray:PutTraceSegments"
              - "xray:PutTelemetryRecords"
          Resource:
              - "*"
    # This section ties the functions to a particular API Gateway instead of creating a new one
    #Â for the time being, we have hardcoded values for API Gateway initally created  with dods-iam.
    # We will move to dynamic Gateway selection based on sls stage.
    apiGateway:
        restApiId: ${file(../env-config.${self:provider.stage}.js):apiGatewayId, file(../env-config.dev.js):apiGatewayId}
        restApiRootResourceId: ${file(../env-config.${self:provider.stage}.js):apiRootResourceId, file(../env-config.dev.js):apiRootResourceId}
        description: Default Gateway for ${self:provider.stage} deployed by Terraform

    environment:
        SERVERLESS_STAGE: ${self:provider.stage}
        SERVERLESS_PORT: ${self:custom.serverless-offline.httpPort}
        DB_CONNECTION_LIMIT: 5
        DB_DRIVER: mariadb
        DB_NAME: dods
        DB_HOST: ${ssm:/infra/${self:provider.stage}/rds/endpoint, 'localhost'}
        DB_USER: ${ssm:/infra/${self:provider.stage}/rds/username, 'dods' }
        DB_PASSWORD: ${ssm:/infra/${self:provider.stage}/rds/password, 'dods'}
        API_GATEWAY_BASE_URL: https://${self:provider.apiGateway.restApiId}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}

custom:
    webpack:
        webpackConfig: ./webpack.config.js
        includeModules: true # Node modules configuration for packaging
        packager: "npm" # Packager that will be used to package your external modules
        keepOutputDirectory: false
    serverless-offline:
        httpPort: 3000
    prune:
        automatic: true
        number: 1
    dependsOn:
        enabled: true
        chains: 8
    localstack:
        stages:
            # list of stages for which the plugin should be enabled
            - passive
        host: http://localhost # optional - LocalStack host to connect to
        edgePort: 4566 # optional - LocalStack edge port to connect to
        autostart: false # optional - Start LocalStack in Docker on Serverless deploy
        # lambda:
        #   # Enable this flag to improve performance
        #   mountCode: True
        docker:
            # Enable this flag to run "docker ..." commands as sudo
            sudo: False
    apiGatewayCaching:
        enabled: true

plugins:
    - serverless-webpack
    - serverless-prune-plugin
    - serverless-localstack
    - serverless-dependson-plugin
    - serverless-offline
    - serverless-api-gateway-caching

functions:
    health:
        handler: src/handlers/health/index.handle
        description: Triggered when http request comes
        events:
            - http:
                method: get
                path: health
                cors: true
                caching:
                    enabled: false
        tags:
            foo: bar

    getClientAccounts:
        handler: src/handlers/getClientAccount/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: get
                  path: clientaccount/{clientAccountId}
                  caching:
                      enabled: false

    createClientAccount:
        handler: src/handlers/createClientAccount/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: post
                  path: clientaccount
                  caching:
                      enabled: false

    searchClientAccount:
        handler: src/handlers/searchClientAccount/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: get
                  path: clientaccount
                  caching:
                      enabled: false

    getSubscriptionTypes:
        handler: src/handlers/getSubscriptionTypes/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: get
                  path: subscription-types
                  caching:
                      enabled: false

    addTeamMemberToClientAccount:
        handler: src/handlers/addTeamMemberToClientAccount/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: put
                  path: clientaccount/{clientAccountId}/teammember
                  caching:
                      enabled: false

    createTeamMember:
        handler: src/handlers/createTeamMember/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: post
                  path: clientaccount/{clientAccountId}/teammember/new
                  caching:
                      enabled: false

    removeTeamMember:
        handler: src/handlers/removeTeamMember/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: delete
                  path: clientaccount/{clientAccountId}/teammember
                  caching:
                      enabled: false

    getClientAccountTeamMembers:
        handler: src/handlers/getClientAccountTeamMembers/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: get
                  path: clientaccount/{clientAccountId}/teammember
                  caching:
                      enabled: false

    updateClientAccount:
        handler: src/handlers/updateClientAccount/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: put
                  path: clientaccount/{clientAccountId}/subscription
                  caching:
                      enabled: false

    getRemainingSeats:
        handler: src/handlers/getRemainingSeats/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: get
                  path: clientaccount/{clientAccountId}/seats
                  caching:
                      enabled: false

    checkClientAccountName:
        handler: src/handlers/checkClientAccountName/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: post
                  path: checkaccountname
                  caching:
                      enabled: false

    updateClientAccountHeader:
        handler: src/handlers/updateClientAccountHeader/index.handle
        description: Triggered when http request comes
        events:
            - http:
                  method: put
                  path: clientaccount/{clientAccountId}/header
                  caching:
                      enabled: false
