service: schedule-service

configValidationMode: warn

frameworkVersion: ^2.64.0

variablesResolutionMode: 20210326

projectDir: ../

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  deploymentBucket:
    name: pip-${self:provider.stage}-services-lambdas
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221

  #------- This section is only required for Lambdas that need
  #        to connect to the central Dods DB (RDS instance).
  #------- Uncomment this section your functions need to connect to Dods DB
  # vpc:
  #   securityGroupIds: ${file(../vpc.${self:provider.stage}.js):securityGroupIds, file(../vpc.local.js):securityGroupIds}
  #   subnetIds: ${file(../vpc.${self:provider.stage}.js):subnetIds, file(../vpc.local.js):subnetIds}
   
  stackTags:
    service: ${self:service}
    env: ${self:provider.stage}
    version: "1"
    teamsEmail: kenan.hancer@somoglobal.com
    team: dods
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"
  # This section ties the functions to a particular API Gateway instead of creating a new one
  #Â for the time being, we have hardcoded values for API Gateway initally created  with dods-iam.
  # We will move to dynamic Gateway selection based on sls stage.
  apiGateway:
    restApiId: ${file(../env-config.${self:provider.stage}.js):apiGatewayId, "local"}
    restApiRootResourceId: ${file(../env-config.${self:provider.stage}.js):apiRootResourceId, "local"}
    description: Default Gateway for ${self:provider.stage} deployed by Terraform


  environment:
    NODE_ENV: ${opt:NODE_ENV, 'test'}
    SERVERLESS_STAGE: ${self:provider.stage}
    SERVERLESS_PORT: ${self:custom.serverless-offline.httpPort}
    CORS_ORIGINS: "*"
    JWK_URL: 'https://cognito-idp.${self:provider.region}.amazonaws.com/eu-west-1_KSdDYoclx/.well-known/jwks.json'
    API_GATEWAY_BASE_URL: https://${self:provider.apiGateway.restApiId}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    ES_CLOUD_ID: ${env:ES_CLOUD_ID}
    ES_KEY_ID: ${env:ES_KEY_ID}
    ES_API_KEY: ${env:ES_API_KEY}

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    keepOutputDirectory: false
  serverless-offline:
    httpPort: 3000
  prune:
    automatic: true
    number: 1
  dependsOn:
    enabled: true
    chains: 8
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - passive
    host: http://localhost # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: false # optional - Start LocalStack in Docker on Serverless deploy
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
  # apiGatewayCaching:
    # enabled: true

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-localstack
  - serverless-dependson-plugin
  - serverless-offline
  - serverless-api-gateway-caching

functions:
  schedule_watcher:
    handler: src/handlers/createSchedule/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: post
          path: scheduler
          cors: true
          caching:
            enabled: false

  get_watcher:
    handler: src/handlers/getSchedule/index.handle
    description: Triggered when http request comes
    events:
      - http:
          method: get
          path: scheduler/{scheduleId}
          cors: true
          caching:
            enabled: false

  deleteSchedule:
    handler: src/handlers/deleteSchedule/index.handle
    description: Delete schedule
    events:
      - http:
          method: delete
          path: scheduler/{id}
          cors: true
          caching:
            enabled: false

  updateSchedule:
    handler: src/handlers/updateSchedule/index.handle
    description: Update schedule
    events:
      - http:
          method: put
          path: scheduler/{id}
          cors: true
          caching:
            enabled: false

  activateSchedule:
    handler: src/handlers/activateSchedule/index.handle
    description: activate schedule
    events:
      - http:
          method: put
          path: scheduler/{id}/activate
          cors: true
          caching:
            enabled: false

  deactivateSchedule:
    handler: src/handlers/deactivateSchedule/index.handle
    description: deactivate schedule
    events:
      - http:
          method: put
          path: scheduler/{id}/deactivate
          cors: true
          caching:
            enabled: false
