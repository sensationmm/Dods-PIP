service: dods-iam

configValidationMode: warn

frameworkVersion: ^2.57.0

variablesResolutionMode: 20210326

projectDir: ../

provider:
  name: aws
  region: eu-west-1
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  deploymentBucket:
    name: pip-${self:provider.stage}-services-lambdas

  lambdaHashingVersion: 20201221

  stackTags:
    service: ${self:service}
    env: ${self:provider.stage}
    version: 1
    teamsEmail: kenan.hancer@somoglobal.com
    team: dods
  tags:
    myTag1: myTag1

  tracing:
    apiGateway: true
    lambda: true

  apiGateway:
    restApiId: ${file(../env-config.${self:provider.stage}.js):apiGatewayId, file(../env-config.dev.js):apiGatewayId}
    restApiRootResourceId: ${file(../env-config.${self:provider.stage}.js):apiRootResourceId, file(../env-config.dev.js):apiRootResourceId}
    description: Default Gateway for ${self:provider.stage} deployed with Terraform

  environment:
    NODE_ENV: development
    SERVERLESS_STAGE: ${self:provider.stage}
    COGNITO_USER_POOL_ID: !Ref DodsUserPool
    COGNITO_CLIENT_ID: !Ref DodsUserPoolClient
    LOGIN_EVENT_BUS_NAME: ${self:custom.resourceNames.DODS_LOGIN_EVENT_BUS_NAME}
    LOGIN_EVENT_BUS_ARN: ${self:custom.resourceNames.DOD_LOGIN_EVENT_BUS_ARN}
    LOGIN_ATTEMPTS_DYNAMODB_TABLE: ${self:custom.resourceNames.DODS_LOGIN_ATTEMPTS_DYNAMODB_TABLE}
    LOGIN_LAST_PASSWORDS_DYNAMODB_TABLE: ${self:custom.resourceNames.DODS_LOGIN_LAST_PASSWORDS_DYNAMODB_TABLE}
    FAILED_LOGIN_ATTEMPT_COUNT: 3
    LOGIN_LAST_PASSWORDS_NOT_REUSE_MINUTES: 262800 # 6 months
    API_GATEWAY_BASE_URL: https://${self:provider.apiGateway.restApiId}.execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}
    RESET_PASSWORD_URL: ${file(../env-config.${self:provider.stage}.js):frontendURL}/password-reset

  eventBridge:
    useCloudFormation: true

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: !GetAtt LoginAttempts.Arn
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource: !GetAtt LoginLastPasswords.Arn
    - Effect: Allow
      Action:
        - cognito-idp:AdminDisableUser
        - cognito-idp:AdminEnableUser
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminDeleteUser
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminDeleteUserAttributes
      Resource: !GetAtt DodsUserPool.Arn
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: !GetAtt LoginEventBus.Arn

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    keepOutputDirectory: false
  prune:
    automatic: true
    number: 1
  dependsOn:
    enabled: true
    chains: 8
  resourceNames:
    DODS_LOGIN_ATTEMPTS_DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-login-attempts
    DODS_LOGIN_LAST_PASSWORDS_DYNAMODB_TABLE: ${self:service}-${self:provider.stage}-login-last-passwords
    DODS_LOGIN_EVENT_BUS_NAME: ${self:service}-${self:provider.stage}-login-event-bus
    DOD_LOGIN_EVENT_BUS_ARN: !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/${self:custom.resourceNames.DODS_LOGIN_EVENT_BUS_NAME}
    DODS_USER_POOL_NAME: ${self:service}-${self:provider.stage}-UserPool
    DODS_USER_POOL_CLIENT_NAME: ${self:service}-${self:provider.stage}-UserPoolClient
  env:
    dev:
      ses_from: michael.brown@somoglobal.com
      ses_source_arn: arn:aws:ses:eu-west-1:390773179818:identity/michael.brown@somoglobal.com
      cognito_reply_to: donotreply@somoglobal.com
    qa:
      ses_from: michael.brown@somoglobal.com
      ses_source_arn: arn:aws:ses:eu-west-1:817206606893:identity/michael.brown@somoglobal.com
      cognito_reply_to: donotreply@somoglobal.com
    test:
      ses_from: giovanni.espinosa@somoglobal.com
      ses_source_arn: arn:aws:ses:eu-west-1:072266309162:identity/giovanni.espinosa@somoglobal.com
      cognito_reply_to: donotreply@somoglobal.com
    production:
<<<<<<< HEAD
      ses_from: no-reply@dodspoliticalintelligence.com
      ses_source_arn: arn:aws:ses:eu-west-1:186202231680:identity/no-reply@dodspoliticalintelligence.com

=======
      ses_from: donotreply@dodspoliticalintelligence.com
      ses_source_arn: arn:aws:ses:eu-west-1:186202231680:identity/donotreply@dodspoliticalintelligence.com
      cognito_reply_to: donotreply@dodspoliticalintelligence.com
>>>>>>> b7662702ea948e1a436724670a579672a1395c4d
  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localhost # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
    autostart: false # optional - Start LocalStack in Docker on Serverless deploy
    # lambda:
    #   # Enable this flag to improve performance
    #   mountCode: True
    docker:
      # Enable this flag to run "docker ..." commands as sudo
      sudo: False
  # apiGatewayCaching:
    # enabled: true

plugins:
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-localstack
  - serverless-dependson-plugin
  - serverless-offline
  # - serverless-api-gateway-caching

functions:
  changePassword:
    description: Triggered when http request comes
    handler: src/handlers/http/changePassword/index.handle
    events:
      - http:
          method: post
          path: changePassword
          # caching:
            # enabled: false
  resetPassword:
    description: Triggered when http request comes
    handler: src/handlers/http/resetPassword/index.handle
    events:
      - http:
          method: post
          path: resetPassword
          # caching:
            # enabled: false
  signIn:
    description: Triggered when http request comes
    handler: src/handlers/http/signIn/index.handle
    events:
      - http:
          method: post
          path: signIn
          # caching:
            # enabled: false
  signOut:
    description: Triggered when http request comes
    handler: src/handlers/http/signOut/index.handle
    events:
      - http:
          method: post
          path: signOut
          # caching:
            # enabled: false
  signUp:
    description: Triggered when http request comes
    handler: src/handlers/http/signUp/index.handle
    events:
      - http:
          method: post
          path: signUp
          # caching:
            # enabled: false
  resendConfirmationCode:
    description: Triggered when http request comes
    handler: src/handlers/http/resendConfirmationCode/index.handle
    events:
      - http:
          method: post
          path: resendConfirmationCode
          # caching:
            # enabled: false
  confirmRegistration:
    description: Triggered when http request comes
    handler: src/handlers/http/confirmRegistration/index.handle
    events:
      - http:
          method: post
          path: confirmRegistration
          # caching:
            # enabled: false
  forgotPassword:
    description: Triggered when http request comes
    handler: src/handlers/http/forgotPassword/index.handle
    events:
      - http:
          method: post
          path: forgotPassword
          # caching:
            # enabled: false
  updateUserAttributes:
    description: Triggered when http request comes
    handler: src/handlers/http/updateUserAttributes/index.handle
    events:
      - http:
          method: post
          path: updateUserAttributes
          # caching:
            # enabled: false
  deleteUserAttributes:
    description: Triggered when http request comes
    handler: src/handlers/http/deleteUserAttributes/index.handle
    events:
      - http:
          method: post
          path: deleteUserAttributes
          # caching:
            # enabled: false
  createUser:
    description: Triggered when http request comes
    handler: src/handlers/http/createUser/index.handle
    events:
      - http:
          method: post
          path: createUser
          # caching:
            # enabled: false
  deleteUser:
    description: Triggered when http request comes
    handler: src/handlers/http/deleteUser/index.handle
    events:
      - http:
          method: post
          path: deleteUser
          # caching:
            # enabled: false
  destroyUser:
    description: Triggered when http request comes
    handler: src/handlers/http/destroyUser/index.handle
    events:
      - http:
          method: post
          path: destroyUser
          # caching:
            # enabled: false
  getUserData:
    description: Triggered when http request comes
    handler: src/handlers/http/getUserData/index.handle
    events:
      - http:
          method: get
          path: getUserData
          # caching:
            # enabled: false
  disableUser:
    description: Triggered when http request comes
    handler: src/handlers/http/disableUser/index.handle
    events:
      - http:
          method: post
          path: disableUser
          # caching:
            # enabled: false
  enableUser:
    description: Triggered when http request comes
    handler: src/handlers/http/enableUser/index.handle
    events:
      - http:
          method: post
          path: enableUser
          # caching:
            # enabled: false

  customMessage:
    description: Triggered before AWS Cognito send notification
    handler: src/handlers/event/customMessage/customMessage.customMessage
    events:
      - cognitoUserPool:
          pool: ${self:service}-${self:provider.stage}-UserPool
          trigger: CustomMessage
          existing: true
  onLoginPasswordEvents:
    description: Triggered when AWS Event Bus takes new event
    handler: src/handlers/event/onLoginPasswordEvents/index.handle
    events:
      - eventBridge:
          eventBus: !GetAtt LoginEventBus.Name
          pattern:
            source:
              - Login
            detail-type:
              - NewUserCreated
              - PasswordUpdated

resources:
  Resources:
    LoginEventBus:
      Type: AWS::Events::EventBus
      DeletionPolicy: Delete
      Properties:
        Name: ${self:custom.resourceNames.DODS_LOGIN_EVENT_BUS_NAME}

    LoginAttempts:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resourceNames.DODS_LOGIN_ATTEMPTS_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: _ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    LoginLastPasswords:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.resourceNames.DODS_LOGIN_LAST_PASSWORDS_DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
          - AttributeName: createdDate
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
          - AttributeName: createdDate
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: _ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    DodsUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.resourceNames.DODS_USER_POOL_NAME}
        EmailVerificationMessage: Your verification code is {####}.
        EmailVerificationSubject: Your verification code
        MfaConfiguration: OFF
        UsernameConfiguration:
          CaseSensitive: false
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK # or CONFIRM_WITH_CODE
          EmailSubject: Your verification code
          EmailMessage: Your verification code is {####}
          EmailSubjectByLink: Dods Public Intelligence Platform - Verify your account
          EmailMessageByLink: <html><head></head><body><p>Hello.</p><p>Welcome to Dods Political intelligence Platform.</p><p>Great to have you on board!</p><hr><h1>Please verify your account</h1><p>To ensure this account is legitimate, please verify your account by clicking the button below.</p><p>Your verification code is {####}.</p><form action="{##Verify Email##}"><input type="submit" value="Begin Free Trial" /></form></body></html>
          SmsMessage: Your username is {username} and temporary password is {####}
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
          InviteMessageTemplate:
            EmailMessage: Your username is {username} and temporary password is {####}
            EmailSubject: Your temporary password
            SMSMessage: Your username is {username} and temporary password is {####}
        UsernameAttributes:
          - email
        # AliasAttributes:
        #   - email
        AutoVerifiedAttributes:
          - email
        EmailConfiguration:
          EmailSendingAccount: DEVELOPER
          From: ${self:custom.env.${self:provider.stage}.ses_from}
          ReplyToEmailAddress: ${self:custom.env.${self:provider.stage}.cognito_reply_to}
          SourceArn: ${self:custom.env.${self:provider.stage}.ses_source_arn}
        Policies:
          PasswordPolicy:
            TemporaryPasswordValidityDays: 7
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
            RequireUppercase: true
        Schema:
          - Name: custom:company-name
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MinLength: 3
              MaxLength: 512
          - Name: custom:job-title
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MinLength: 3
              MaxLength: 256
          - Name: "name"
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MinLength: 3
              MaxLength: 256
          - Name: "clientAccountId"
            AttributeDataType: Number
            Mutable: true
          - Name: "ClientAccountId"
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MinLength: 0
              MaxLength: 50
          - Name: "clientAccountName"
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MinLength: 0
              MaxLength: 100
          - Name: "UserProfileUuid"
            AttributeDataType: String
            Mutable: true
            StringAttributeConstraints:
              MinLength: 0
              MaxLength: 100

    DodsUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.resourceNames.DODS_USER_POOL_CLIENT_NAME}
        GenerateSecret: false
        UserPoolId:
          Ref: DodsUserPool

    DodsUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: !Ref DodsUserPool
        Domain: dods-pip-${self:provider.stage}
