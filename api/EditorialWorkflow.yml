openapi: 3.0.0
info:
    description: Dods Editorial Workflow API
    version: '1.0.0'
    title: Editorial Workflow Service API
paths:
    /editorial-record:
        post:
            summary: Create new Editorial Record
            requestBody:
                $ref: '#/components/requestBodies/CreateEditorialRecord'
            responses:
                '200':
                    $ref: '#/components/responses/EditorialRecordResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthenticated'
                '403':
                    $ref: '#/components/responses/Unauthorized'
        get:
            summary: List Editorial Records found by search parameters
            parameters:
                - in: query
                  name: searchTerm
                  description: Search Criteria
                  schema:
                      type: string
                  required: false
                - in: query
                  name: contentSource
                  description: Search Criteria
                  schema:
                      type: string
                  required: false
                - in: query
                  name: informationType
                  description: Search Criteria
                  schema:
                      type: string
                  required: false
                - in: query
                  name: status
                  description: Search Criteria
                  schema:
                      type: string
                      format: uuid
                      example: d290f1ss-6c54-4b01-98e6-d701748f7151
                  required: false
                - in: query
                  name: page
                  description: Current page selected in pagination
                  schema:
                      type: integer
                  required: false
                - in: query
                  name: pageSize
                  description: Quantity of items per page in pagination
                  schema:
                      type: integer
                  required: false
            responses:
                '200':
                    $ref: '#/components/responses/EditorialRecordListResponse'
                '400':
                    $ref: '#/components/responses/BadRequest'
                '401':
                    $ref: '#/components/responses/Unauthenticated'
                '403':
                    $ref: '#/components/responses/Unauthorized'

components:
    responses:
        EditorialRecordResponse:
            description: Response with single Editorial Record
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/EditorialRecordResponse'

        EditorialRecordListResponse:
            description: Editorial Records found with search parameters
            content:
                application/json:
                    schema:
                        type: 'object'
                        required:
                            - totalRecords
                            - filteredRecords
                            - results
                        properties:
                            totalRecords:
                                type: integer
                                example: 1
                            filteredRecords:
                                type: integer
                                example: 1
                            results:
                                type: array
                                items:
                                    $ref: '#/components/schemas/EditorialRecordResponse'

        BadRequest:
            description: Bad request
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        Unauthenticated:
            description: Unauthenticated
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        Unauthorized:
            description: Unauthorized
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'
        NotFound:
            description: The specified resource was not found
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/Error'

    requestBodies:
        CreateEditorialRecord:
            description: A JSON object containing Editorial Record information
            required: true
            content:
                application/json:
                    schema:
                        $ref: '#/components/schemas/EditorialRecordRequest'

    schemas:
        Error:
            type: object
            properties:
                code:
                    type: string
                    example: '4xx'
                message:
                    type: string
                    example: Error message relevant to error
            required:
                - code
                - message
        EditorialRecordBase:
            type: object
            properties:
                documentName:
                    type: string
                    example: Some UK Parliament Oral Question
                s3Location:
                    type: string
                    example: arn:aws:s3:::editorial-workflow-prod/editorial-workflow/01012020/some-question.json
                informationType:
                    type: string
                contentSource:
                    type: string
                scheduledPublishingDate:
                    type: string
                    format: date
                    example: '2020-09-01 09:30:26'     
            required:
                - documentName
                - s3Location
        
        EditorialRecordRequest:
            allOf:
              - $ref: '#/components/schemas/EditorialRecordBase'
            type: object
            properties:
                assignedEditor:
                    type: string
                    format: uuid
                    example: d290f1ss-6c54-4b01-98e6-d701748f7151
                status:
                    type: string
                    format: uuid
                    example: d290f1ss-6c54-4b01-98e6-d701748f7151

        EditorialRecordResponse:
            allOf:
              - $ref: '#/components/schemas/EditorialRecordBase'
            type: object
            properties:
                id: 
                    type: string
                    format: uuid
                    example: d290f1ss-6c54-4b01-98e6-d701748f7151
                assignedEditor:
                    type: object
                    properties:
                        id:
                            type: string
                            format: uuid
                            example: d290f1ss-6c54-4b01-98e6-d701748f7151
                        name:
                            type: string
                            example: John Doe
                status:
                    type: object
                    properties:
                        id:
                            type: string
                            format: uuid
                            example: d290f1ss-6c54-4b01-98e6-d701748f7151
                        name:
                            type: string
                            example: In Progress
                createdAt:
                    type: string
                    format: date
                    example: '2020-09-01 09:30:26'
                updatedAt:
                    type: string
                    format: date
                    example: '2020-09-01 09:30:26'           