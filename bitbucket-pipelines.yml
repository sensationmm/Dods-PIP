definitions:
  caches:
    fe-node: frontend/dods-pip/node_modules
  services:
    docker:
      memory: 5120
options:
  max-time: 30
pipelines:
  default:
    - parallel:
      - step:
          name: Test build Frontend
          image: node:lts-alpine3.14
          size: 2x
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "frontend/dods_pip/**"
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn test
            - yarn lint
            - docker build -t ${IMAGE_NAME} .
            # - yarn build

      - step:
          name: Deploy Graphologi Webhook
          image: gioatsomoglobal/devopstools:0.4.2
          size: 2x
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/graphologi-integration/**"
          script:
            - cd services/graphologi-integration
            - npm install
            - serverless deploy

      - step:
          name: Deploy Pandas Layer
          image: gioatsomoglobal/devopstools:0.4.2
          size: 2x
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/pandas-layer/**"
          script:
            - cd services/pandas-layer
            - npm install
            - cd layers/pandas
            - ./build_layer.sh
            - cd ../..
            - serverless deploy --stage dev

      - step:
          name: User Profile Service
          image: gioatsomoglobal/devopstools:0.4.3
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/user-profile/**"
          script:
            - cd services/user-profile
            - npm install
            - SERVERLESS_STAGE=dev ./setenv.sh
            - source *.env
            - NODE_ENV=test npm run test:coverage
            
      - step:
          name: Client Account Service
          image: gioatsomoglobal/nodejs-builder:0.2
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/client-account/**"
          script:
            - cd services/client-account
            - npm install
            - SERVERLESS_STAGE=dev npm run test:coverage

#      - step:
#          name: Documents Service
#          image: gioatsomoglobal/nodejs-builder:0.2
#          caches:
#            - node
#          condition:
#            changesets:
#              includePaths:
#                - "services/documents/**"
#          script:
#            - cd services/documents
#            - npm install
#            - SERVERLESS_STAGE=dev npm run test:coverage

      - step:
          name: Editorial Workflow Service
          image: gioatsomoglobal/nodejs-builder:0.2
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/editorial-workflow/**"
          script:
            - cd services/editorial-workflow
            - npm install
            - SERVERLESS_STAGE=dev ./setenv.sh
            - source *.env
            - npm run test

      - step:
          name: Validate OpenAPI definitions
          image: openapitools/openapi-generator-cli:v5.2.1
          condition:
            changesets:
              includePaths:
                - "api/**"
          script:
            - cd api
            - for i in *.yml; do docker-entrypoint.sh validate -i $i; done

      - step:
          name: Deploy Scrapping Lambdas
          image: gioatsomoglobal/devopstools:0.4.2
          size: 2x
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "scrapping/**"
          script:
            - cd scrapping
            - npm install
            - ./scrapping_deploy.sh

  branches:
    master:
      - parallel:
        - step:
            name: Auth-Authz Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.5
            condition:
              changesets:
                includePaths:
                  - "services/dods-iam/**"
            script:
              - cd services/dods-iam
              - npm install
              - NODE_ENV=test npm run test:coverage 
              - npx serverless deploy --stage dev

        - step: 
            name: User Profile Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.5
            condition:
              changesets:
                includePaths:
                  - "services/user-profile/**"
            script:
              - cd services/user-profile
              - npm install
              - SERVERLESS_STAGE=dev ./setenv.sh
              - source *.env
              # - NODE_ENV=test npm run test:coverage 
              - npx serverless deploy --stage dev

        - step: 
            name: Client Account Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.5
            condition:
              changesets:
                includePaths:
                  - "services/client-account/**"
            script:
              - cd services/client-account
              - npm install
              - export SERVERLESS_STAGE=dev
              - npm run test:coverage 
              - npx serverless deploy --stage dev

        - step: 
            name: Documents Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.5
            condition:
              changesets:
                includePaths:
                  - "services/documents/**"
            script:
              - cd services/documents
              - npm install
              - export SERVERLESS_STAGE=dev
              # - npm run test:coverage 
              - npx serverless deploy --stage dev

        - step: 
            name: Editorial Workflow Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.5
            condition:
              changesets:
                includePaths:
                  - "services/editorial-workflow/**"
            script:
              - cd services/editorial-workflow
              - npm install
              - SERVERLESS_STAGE=dev ./setenv.sh
              - source *.env
              - npm run test
              - npx serverless deploy --stage dev

        - step:
            name: Frontend Build and Deploy 
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.3
            deployment: Test
            services:
              - docker
            caches:
              - fe-node

            condition:
              changesets:
                includePaths:
                  - "frontend/dods_pip/**"
            script:
              - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
              - cd ${FRONTEND_SRC}
              - yarn install
              - yarn lint
              - yarn test
              - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ECR_NAME}
              - docker build -t ${IMAGE_NAME} .
              - docker push ${IMAGE_NAME}
              - cd ../../tools
              - ./ecs_deploy.sh ${FARGATE_SERVICE_FRONTEND}

        - step: 
            name: Taxonomy Service Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.5
            condition:
              changesets:
                includePaths:
                  - "services/taxonomy-service/**"
            script:
              - cd services/taxonomy-service
              - npm install
              - export SERVERLESS_STAGE=dev
              # - npm run test:coverage 
              - npx serverless deploy --stage dev

        - step:
            name: Terraform Plan
            deployment: dev
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.6
            condition:
              changesets:
                includePaths:
                  - "infrastructure-terraform/**"
            script:
              - cd infrastructure-terraform
              - terraform init
              - terraform plan -var db_password="${CLIENT_PROFILE_DB_PASSWORD}"
              - terraform apply -var db_password="${CLIENT_PROFILE_DB_PASSWORD}" -auto-approve
              - terraform output --json > tf_out_values.json
              - terraform-docs markdown table --output-values --output-values-from tf_out_values.json . > INFRA.md
              - ./push_back.sh

  custom:
    deploy-frontend-production:
      - step:
          name: Deploy frontend to production environment
          image: gioatsomoglobal/devopstools:0.4.5
          size: 2x
          services:
            - docker
          deployment: production
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn lint
            - yarn test
            - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ECR_NAME}
            - docker build -t ${IMAGE_NAME} .
            - docker push ${IMAGE_NAME}
            - cd ../../tools
            - ./ecs_deploy --service-name frontend-service --cluster pip-production-fargate-cluster --image $IMAGE_NAME

    storybook-deployment:
      - step:
          name: Storybook deployment (dev)
          image: gioatsomoglobal/devopstools:0.4.5
          size: 2x
          script:
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn build-storybook
            - aws s3 rm s3://test-dods-pip-storybook/
            - aws s3 mv --acl public-read --recursive ./storybook-static/ s3://test-dods-pip-storybook/