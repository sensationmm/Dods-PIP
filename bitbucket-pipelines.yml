pipelines:
  default:
    - parallel:
      - step:
          name: Build and Deploy Frontend
          image: gioatsomoglobal/devopstools:0.2.0
          deployment: Test
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "frontend/dods_pip/**"
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn lint
            - yarn build-storybook
            - yarn test
            - aws s3 rm s3://test-dods-pip-storybook/
            - aws s3 mv --acl public-read --recursive ./public/ s3://test-dods-pip-storybook/
            - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ECR_NAME}
            - docker build -t ${IMAGE_NAME} .
            - docker push ${IMAGE_NAME}
            - cd ../../tools
            - ./ecs_deploy.sh ${FARGATE_SERVICE_FRONTEND}

      - step:
          name: Deploy Graphologi Webhook
          image: gioatsomoglobal/devopstools:0.2.0
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/graphologi-integration/**"
          script:
            - cd services/graphologi-integration
            - npm install
            - serverless deploy

      - step:
          name: Deploy Scrapping Lambdas
          image: gioatsomoglobal/devopstools:0.4.2
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "scrapping/**"
          script:
            - cd scrapping
            - npm install
            - ./scrapping_deploy.sh

  branches:
    master:
      - step:
          name: End to End testing
          script:
            - echo 'Define and run end e2e testing'

  custom:
    deployment-to-staging:
      - step:
          name: Deploy to staging environment
          image: gioatsomoglobal/devopstools:0.2.0
          deployment: Staging
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
            - cd tools
            - ./ecs_deploy.sh ${FARGATE_SERVICE_FRONTEND}
