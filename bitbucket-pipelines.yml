definitions:
  services:
    docker:
      memory: 5120
options:
  max-time: 30

pipelines:
  pull-requests:
    '**': # Run this step as default for any branch without an specific definition
      - step:
          name: Check changes to trigger builds
          # image: gioatsomoglobal/devopstools:0.4.6
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          script:
            - tools/on-changes.sh build

  branches:
    master:
      - parallel:
        - step:
            name: Deploy projects to their envionments
            # image: gioatsomoglobal/devopstools:0.4.6
            image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
            script:
              - tools/on-changes.sh deploy
          
        - step:
            name: Terraform Plan
            size: 2x
            # image: gioatsomoglobal/devopstools:0.4.6
            image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
            condition:
              changesets:
                includePaths:
                  - "infrastructure-terraform/**"
            script:
              - cd infrastructure-terraform
              - terraform init
              - terraform plan -var db_password="${CLIENT_PROFILE_DB_PASSWORD}"
              - terraform apply -var db_password="${CLIENT_PROFILE_DB_PASSWORD}" -auto-approve
              - terraform output --json > tf_out_values.json
              - terraform-docs markdown table --output-values --output-values-from tf_out_values.json . > INFRA.md
              - ./push_back.sh

  custom:
    build_frontend:
      - variables:
        - name: SERVICE
          default: dods_pip
      - step:
          name: "Frontend: Test and Build"
          # image: gioatsomoglobal/devopstools:0.4.5
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - 'echo "Running build for service: ${SERVICE}"'
            - export THIS="frontend/${SERVICE,,}"
            - export HASH=$(echo ${BITBUCKET_COMMIT:0:7})
            - cd $THIS
            - yarn install
            - yarn lint
            - yarn test
            - docker build -t "${HASH}" .

    build_services:
      - variables:
        - name: SERVICE
          default: user-profile
      - step:
          name: "Services: Test and Build"
          # image: gioatsomoglobal/devopstools:0.4.5
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - 'echo "Running build for service: ${SERVICE}"'
            - cd services/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from services/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default service building definitions"
                npm ci
                SERVERLESS_STAGE=dev npm run test:coverage
                npx serverless package
              fi

    build_scrapping:
      - variables:
        - name: SERVICE
          default: debates-hoc-uk
      - step:
          name: "Scrapping: Test and Build"
          # image: gioatsomoglobal/devopstools:0.4.2
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.1.0
          script:
            - 'echo "Running build for service: ${SERVICE}"'
            - cd scrapping/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from scrapping/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default scrapping building definitions"
                if [[ -e 'package.json' ]]; then
                    npm ci
                fi
                if [[ -e 'requirements.txt' ]]; then
                    pip3 install -r requirements.txt
                fi
                if [[ -e 'serverless.yml' ]]; then
                  npx serverless package
                fi
              fi

    build_ingestion-python:
      - variables:
        - name: SERVICE
          default: hansard-api
      - step:
          name: "New Ingestion: Test and Build"
          # image: public.ecr.aws/dods-cicd/ingestion:1.1.0
          image: public.ecr.aws/dods-cicd/ingestion-python-builder:1.0.0
          script:
            - 'echo "Running build for ingestion: ${SERVICE}"'
            - cd ingestion-python/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from scrapping/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default scrapping building definitions"
                if [[ -e 'package.json' ]]; then
                    npm install
                fi
                if [[ -e 'serverless.yml' ]]; then
                  npx serverless package
                fi
              fi

    build_npm-packages:
      - variables:
        - name: SERVICE
          default: dods-model
      - step:
          name: "NPM Packages: Test and Build"
          # image: gioatsomoglobal/devopstools:0.4.5
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          script:
            - 'echo "Running build for npm-package: ${SERVICE}"'
            - cd npm-packages/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from npm-packages/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default npm-package building definitions"
                if [[ -e 'package.json' ]]; then
                    ../tools/validate_npm.sh
                    npm install
                    npm run build
                fi
              fi

    build_docker-images:
      - variables:
        - name: IMAGE
          default: bitbucket-builder
      - step:
          name: "Dockerimages: Test and Build"
          # image: gioatsomoglobal/devopstools:0.4.6
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - 'echo "Running build for image: ${IMAGE}"'
            - cd docker-images/$IMAGE
            - docker build -t $IMAGE .
         
    deploy_frontend:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: "dods_pip"
      - step:
          name: "Frontend: Build & Publish Container Image"
          # image: gioatsomoglobal/devopstools:0.4.5
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - echo "Running deployment for frontend $SERVICE to environment ${ENVIRONMENT^^}"
            - export THIS="frontend/${SERVICE,,}"
            - export HASH=$(echo ${BITBUCKET_COMMIT:0:7})
            - cd $THIS
            - yarn install
            - yarn lint
            - yarn test
            - ../../tools/set-deployer.sh && source credentials.txt
      # AWS_ACCOUNT_ID is exported by set-deployer.sh based on the value received on $ENVIRONMENT var.
      # The account IDs are kept as repository variables with naming standard as <ENVIRONMENT>_ACCOUNT_ID
      # Also on the repository variables: AWS_DEFAULT_REGION and FRONTEND_IMAGE
            - export IMAGE_NAME=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${FRONTEND_IMAGE}:${HASH}
            - docker build -t "${IMAGE_NAME}" .
            - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            - docker push ${IMAGE_NAME}
            - ../../tools/ecs_deploy --service-name frontend-service --cluster pip-${ENVIRONMENT,,}-fargate-cluster --image $IMAGE_NAME --skip-deployments-check --timeout 300
            - aws ssm put-parameter --name "frontend-image" --value $IMAGE_NAME --type String --overwrite

    deploy_services:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: user-profile
      - step:
          name: "Backend Service: Deploy to Environment"
          # image: gioatsomoglobal/devopstools:0.4.6
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          size: 2x
          services:
            - docker
          script:
            - echo "Running deployment for service $SERVICE to environment ${ENVIRONMENT^^}"
            - export THIS="services/$SERVICE"
            - cd $THIS 
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from services/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default service building definitions"
                npm ci
                SERVERLESS_STAGE=dev npm run test:coverage
              fi
    # Set credentials for the target environment
            - ../../tools/set-deployer.sh && source credentials.txt

    # Run actual deployment steps giving an option for custom definitions
            - |
              if [[ -e .ci/deploy.sh ]]; then
                echo "Running special deployment definitions from services/$SERVICE/.ci/deploy.sh"
                bash .ci/deploy.sh
              else
                echo "Running default service deployment definitions"
                npx serverless deploy --stage ${ENVIRONMENT,,}
              fi 

    deploy_npm-packages:
# This job deploys packages to private NPM repository, so the concept of "envrionment"
# is moot, asumming always "production" since it is a single NPM instance at the end of the day.
      - variables:
        - name: ENVIRONMENT
          default: "DO NOT CHANGE"
        - name: SERVICE
          default: dods-model
      - step:
          name: "NPM Package: Deploy to NPM"
          image: gioatsomoglobal/devopstools:0.4.6
          script:
            - 'echo "Running deployment for npm-package: ${SERVICE}"'
            - cd npm-packages/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from npm-packages/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default npm-package building definitions"
                if [[ -e 'package.json' ]]; then
                    ../tools/validate_npm.sh
                    npm install
                    npm run build
                    npm publish
                fi
              fi

    deploy_scrapping:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: debates-hoc-uk
      - step:
          name: "Scrapping: Deploy to Environment"
          image: gioatsomoglobal/devopstools:0.4.2
          script:
            - 'echo "Running deployment for scraper: ${SERVICE}"'
            - cd scrapping/$SERVICE
    # Set credentials for the target environment
            - ../../tools/set-deployer.sh && source credentials.txt
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from scrapping/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default scrapping building definitions"
                if [[ -e 'package.json' ]]; then
                    npm ci
                fi
                if [[ -e 'requirements.txt' ]]; then
                    pip3 install -r requirements.txt
                fi
                if [[ -e 'serverless.yml' ]]; then
                  npx serverless deploy --stage ${ENVIRONMENT,,}
                fi
              fi

    deploy_ingestion-python:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: hansard-api
      - step:
          name: "Ingestion: Deploy to Environment"
          # image: public.ecr.aws/dods-cicd/ingestion:1.1.0
          image: public.ecr.aws/dods-cicd/ingestion-python-builder:1.0.0
          script:
            - 'echo "Running deployment for ingestion: ${SERVICE}"'
            - cd ingestion-python/$SERVICE
    # Set credentials for the target environment
            - ../../tools/set-deployer.sh && source credentials.txt
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from scrapping/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default scrapping building definitions"
                if [[ -e 'package.json' ]]; then
                    npm install
                fi
                if [[ -e 'serverless.yml' ]]; then
                  npx serverless deploy --stage ${ENVIRONMENT,,}
                fi
              fi

    deploy_docker-image:
      - variables:
          - name: ENVIRONMENT
            default: "DEV"
          - name: IMAGE
            default: bitbucket-builder
      - step:
         name: "Dockerimages: Deploy to Environment"
         # image: gioatsomoglobal/devopstools:0.4.6
         image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
         size: 2x
         services:
           - docker
         caches:
           - docker
         script:
           # Define destination variable
           - cd docker-images/${IMAGE}
           - VERSION=$(cat version)
           - export DEST="public.ecr.aws/dods-cicd/${IMAGE}:${VERSION}"
           - echo "only push to ECR if that version doesn't yet exist"
           - |
             if AWS_DEFAULT_REGION=us-east-1 aws ecr-public describe-image-tags --registry-id 390773179818 --repository-name $IMAGE \
               | jq '.imageTagDetails[].imageTag' \
               | grep $VERSION
             then
               echo "version found, won't deploy"
               exit 1
             fi
           - echo "Running deployment for image $IMAGE to environment ${ENVIRONMENT^^} $DEST"
           - docker build -t ${DEST} .
           # Run actual deployment steps giving an option for custom definitions
           # Push to ECR 
           - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/dods-cicd
           - docker push $DEST

    storybook-deployment:
      - step:
          name: Storybook deployment (dev)
          # image: gioatsomoglobal/devopstools:0.4.5
          image: public.ecr.aws/dods-cicd/bitbucket-builder:1.0.1
          size: 2x
          script:
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn build-storybook
            - aws s3 rm s3://test-dods-pip-storybook/
            - aws s3 mv --acl public-read --recursive ./storybook-static/ s3://test-dods-pip-storybook/
