definitions:
  services:
    docker:
      memory: 5120
options:
  max-time: 30

pipelines:
  pull-requests:
    '**': # Run this step as default for any branch without an specific definition
      - step:
          name: Test and build changes
          image: gioatsomoglobal/devopstools:0.4.6
          script:
            - tools/on-changes.sh build

  default:
    - parallel:
      - step:
          name: Validate OpenAPI definitions
          image: openapitools/openapi-generator-cli:v5.2.1
          condition:
            changesets:
              includePaths:
                - "api/**"
          script:
            - cd api
            - for i in *.yml; do docker-entrypoint.sh validate -i $i; done

      - step:
          name: Deploy Scrapping Lambdas
          image: gioatsomoglobal/devopstools:0.4.2
          condition:
            changesets:
              includePaths:
                - "scrapping/**"
          script:
            - cd scrapping
            - npm install
            - ./scrapping_deploy.sh

  branches:
    master:
      - parallel:
        - step:
            name: Deploy changes to their environments
            script:
              - tools/on-changes.sh deploy
          
        - step:
            name: Terraform Plan
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.6
            condition:
              changesets:
                includePaths:
                  - "infrastructure-terraform/**"
            script:
              - cd infrastructure-terraform
              - terraform init
              - terraform plan -var db_password="${CLIENT_PROFILE_DB_PASSWORD}"
              - terraform apply -var db_password="${CLIENT_PROFILE_DB_PASSWORD}" -auto-approve
              - terraform output --json > tf_out_values.json
              - terraform-docs markdown table --output-values --output-values-from tf_out_values.json . > INFRA.md
              - ./push_back.sh

  custom:
    build_frontend:
      - variables:
        - name: SERVICE
          default: dods_pip
      - step:
          name: "Frontend: Test and Build"
          image: gioatsomoglobal/devopstools:0.4.5
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - 'echo "Running build for service: ${SERVICE}"'
            - export THIS="frontend/${SERVICE,,}"
            - export HASH=$(echo ${BITBUCKET_COMMIT:0:7})
            - cd $THIS
            - yarn install
            - yarn lint
            - yarn test
            - docker build -t "${HASH}" .
            - docker save --output "${HASH}"
            - aws s3 rm s3://pip-dev-services-lambdas/frontendImages/
            - aws s3 cp ${HASH} s3://pip-dev-services-lambdas/frontendImages/

    build_services:
      - variables:
        - name: SERVICE
          default: user-profile
      - step:
          name: "Services: Test and Build"
          image: gioatsomoglobal/devopstools:0.4.5
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - 'echo "Running build for service: ${SERVICE}"'
            - cd services/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from services/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default service building definitions"
                npm ci
                SERVERLESS_STAGE=dev npm run test:coverage
                npx serverless package
              fi

    build_scrapping:
      - variables:
        - name: SERVICE
          default: debates-hoc-uk
      - step:
          name: "Scrapping: Test and Build"
          image: gioatsomoglobal/devopstools:0.4.2
          script:
            - 'echo "Running build for service: ${SERVICE}"'
            - cd scrapping/$SERVICE
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from scrapping/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default scrapping building definitions"
                if [[ -e 'package.json' ]]; then
                    npm ci
                fi
                if [[ -e 'requirements.txt' ]]; then
                    pip3 install -r requirements.txt
                fi
                sls package
              fi

    deploy_frontend:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: "dods_pip"
      - step:
          name: "Frontend: Deploy to Environment"
          image: gioatsomoglobal/devopstools:0.4.5
          size: 2x
          services:
            - docker
          caches:
            - docker
          script:
            - echo "Running deployment for frontend $SERVICE to environment ${ENVIRONMENT^^}"
            - export THIS="frontend/${SERVICE,,}"
            - cd $THIS && mkdir dist
            - aws s3 cp s3://pip-dev-services-lambdas/frontendImages/ dist/ --recursive --only-show-errors
            - export TAG=$(ls -t1 dist/ | head -1)
            - ../../tools/set-deployer.sh && source credentials.txt
      # AWS_ACCOUNT_ID is exported by set-deployer.sh based on the value received on $ENVIRONMENT var.
      # The account IDs are kept as repository variables with naming standard as <ENVIRONMENT>_ACCOUNT_ID
      # Also on the repository variables: AWS_DEFAULT_REGION and FRONTEND_IMAGE
            - export IMAGE_NAME=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${FRONTEND_IMAGE}:${TAG}
            - docker load --input dist/$TAG
            - docker images
            - docker tag ${TAG} ${IMAGE_NAME}
            - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
            - docker push ${IMAGE_NAME}
            - ../../tools/ecs_deploy --service-name frontend-service --cluster pip-${ENVIRONMENT,,}-fargate-cluster --image $IMAGE_NAME --skip-deployments-check

    deploy_services:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: user-profile
      - step:
          name: "Backend Service: Deploy to Environment"
          image: gioatsomoglobal/devopstools:0.4.5
          script:
            - echo "Running deployment for service $SERVICE to environment ${ENVIRONMENT^^}"
            - export THIS="services/$SERVICE"
            - cd $THIS 
    # Might be overkill, but run tests and an sls package to have an early stoppage
    #  of faulty deployments (though they were merged to master)
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from services/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default service building definitions"
                npm ci
                SERVERLESS_STAGE=dev npm run test:coverage
              fi
    # Set credentials for the target environment
            - ../../tools/set-deployer.sh && source credentials.txt

    # Run actual deployment steps giving an option for custom definitions
            - |
              if [[ -e .ci/deploy.sh ]]; then
                echo "Running special deployment definitions from services/$SERVICE/.ci/deploy.sh"
                bash .ci/deploy.sh
              else
                echo "Running default service deployment definitions"
                npx serverless deploy --stage ${ENVIRONMENT,,}
              fi 

    deploy_scrapping:
      - variables:
        - name: ENVIRONMENT
          default: "DEV"
        - name: SERVICE
          default: debates-hoc-uk
      - step:
          name: "Scrapping: Deploy to Environment"
          image: gioatsomoglobal/devopstools:0.4.2
          script:
            - 'echo "Running deployment for scraper: ${SERVICE}"'
            - cd scrapping/$SERVICE
    # Set credentials for the target environment
            - ../../tools/set-deployer.sh && source credentials.txt
            - |
              if [[ -e .ci/build.sh ]]; then
                echo "Running special building definitions from scrapping/$SERVICE/.ci/build.sh"
                bash .ci/build.sh
              else
                echo "Running default scrapping building definitions"
                if [[ -e 'package.json' ]]; then
                    npm ci
                fi
                if [[ -e 'requirements.txt' ]]; then
                    pip3 install -r requirements.txt
                fi
                sls deploy --stage ${ENVIRONMENT,,}
              fi

    storybook-deployment:
      - step:
          name: Storybook deployment (dev)
          image: gioatsomoglobal/devopstools:0.4.5
          size: 2x
          script:
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn build-storybook
            - aws s3 rm s3://test-dods-pip-storybook/
            - aws s3 mv --acl public-read --recursive ./storybook-static/ s3://test-dods-pip-storybook/