pipelines:
  default:
    - parallel:
      - step:
          name: Test build Frontend
          image: node:alpine
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "frontend/dods_pip/**"
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn test
            - yarn lint
            - yarn build
            - yarn build-storybook

      - step:
          name: Deploy Graphologi Webhook
          image: gioatsomoglobal/devopstools:0.2.0
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/graphologi-integration/**"
          script:
            - cd services/graphologi-integration
            - npm install
            - serverless deploy

      - step:
          name: User Profile Service
          image: gioatsomoglobal/devopstools:0.4.3
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/userProfile/**"
          script:
            - ./what2build.sh
            - cd services/userProfile
            - npm install
            - export SERVERLESS_STAGE=dev
            - ./setenv.sh
            - source *.env
            - NODE_ENV=test npm run test
            - NODE_ENV=test npm run test:coverage
            
      - step:
          name: Client Account Service
          image: gioatsomoglobal/nodejs-builder:0.1
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "services/client-account/**"
          script:
            - ./what2build.sh
            - cd services/client-account
            - npm install
            - export SERVERLESS_STAGE=dev
            - ./setenv.sh
            - source *.env
            - NODE_ENV=test npm run test:coverage

      - step:
          name: Validate OpenAPI definitions
          image: openapitools/openapi-generator-cli:v5.2.1
          condition:
            changesets:
              includePaths:
                - "api/**"
          script:
            - cd api
            - for i in *.yml; do; openapi-generator-cli validate $i; done

      - step:
          name: Deploy Scrapping Lambdas
          image: gioatsomoglobal/devopstools:0.4.2
          services:
            - docker
          caches:
            - node
          condition:
            changesets:
              includePaths:
                - "scrapping/**"
          script:
            - cd scrapping
            - npm install
            - ./scrapping_deploy.sh

  branches:
    master:
      - parallel:

        - step: 
            name: Auth-Authz Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.3
            condition:
              changesets:
                includePaths:
                  - "services/dods-iam/**"
            script:
              - cd services/dods-iam
              - npm install
              - NODE_ENV=test npm run test 
              - NODE_ENV=test npm run test:coverage 
              - serverless deploy --stage dev

        - step: 
            name: User Profile Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.3
            condition:
              changesets:
                includePaths:
                  - "services/userProfile/**"
            script:
              - ./what2build.sh 
              - cd services/userProfile
              - npm install
              - export SERVERLESS_STAGE=dev
              - ./setenv.sh
              - source *.env
              - NODE_ENV=test npm run test 
              - NODE_ENV=test npm run test:coverage 
              - serverless deploy --stage dev

        - step: 
            name: Client Account Deploy
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.3
            condition:
              changesets:
                includePaths:
                  - "services/client-account/**"
            script:
              - ./what2build.sh
              - cd services/client-account
              - npm install
              - export SERVERLESS_STAGE=dev
              - ./setenv.sh
              - source *.env
              - NODE_ENV=test npm run test 
              - NODE_ENV=test npm run test:coverage 
              - serverless deploy --stage dev

        - step:
            name: Frontend Build and Deploy 
            size: 2x
            image: gioatsomoglobal/devopstools:0.4.3
            deployment: Test
            services:
              - docker
            caches:
              - node
            condition:
              changesets:
                includePaths:
                  - "frontend/dods_pip/**"
            script:
              - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
              - cd ${FRONTEND_SRC}
              - yarn install
              - yarn lint
              - yarn build-storybook
              - yarn test
              - aws s3 rm s3://test-dods-pip-storybook/
              - aws s3 mv --acl public-read --recursive ./storybook-static/ s3://test-dods-pip-storybook/
              - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ECR_NAME}
              - docker build -t ${IMAGE_NAME} .
              - docker push ${IMAGE_NAME}
              - cd ../../tools
              - ./ecs_deploy.sh ${FARGATE_SERVICE_FRONTEND}

  custom:
    deployment-to-staging:
      - step:
          name: Deploy to staging environment
          image: gioatsomoglobal/devopstools:0.4.3
          deployment: Staging
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_COMMIT}
            - cd tools
            - ./ecs_deploy.sh ${FARGATE_SERVICE_FRONTEND}
