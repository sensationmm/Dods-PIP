pipelines:
  default:
    - step:
        name: Lint and test PIP Frontend
        image: node:lts-alpine
        caches:
          - node
          - docker
        condition:
          changesets:
            includePaths:
              - "frontend/dods_pip/**"
        services:
          - docker
        script:
          - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_BUILD_NUMBER}
          - cd ${FRONTEND_SRC}
          - yarn install
          - yarn lint
          - yarn test

  pull-requests:
    # Pull requests to main branch will trigger a deployment to Test environment
    main: 
      - step:
          image: node:lts-alpine
          deployment: Test
          caches:
            - node
            - docker
          condition:
            changesets:
              includePaths:
                - "frontend/dods_pip/**"
          services:
            - docker
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_BUILD_NUMBER}
            - cd ${FRONTEND_SRC}
            - yarn install
            - yarn lint
            - yarn test
            - echo ${AWS_ECR_PWD} | docker login --username ${AWS_ECR_USER} --password-stdin ${AWS_ECR_NAME}
            - docker build -t ${IMAGE_NAME} .
            - docker push ${IMAGE_NAME}
      - step:
          name: Deploy Frontend to test environment
          image: gioatsomoglobal/devopstools:0.1.0
          deployment: Test
          condition:
            changesets:
              includePaths:
                - "frontend/dods_pip/**"
          script:
            - export IMAGE_NAME=${AWS_ECR_NAME}/${FRONTEND_IMAGE}:${BITBUCKET_BUILD_NUMBER}
            - cd tools
            - echo "This were deployment to staging environment happens"

  custom:
    deployment-to-staging:
      - step:
          name: Deploy to staging environment
          deployment: Staging
          script:
            - echo "This would be a manual deployment to production"